<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TravelingLight</title>
  <subtitle>旅行的意义在于沿途的风景</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2016-10-11T04:02:54.000Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>Superbeet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>parking_lot</title>
    <link href="http://localhost:4000/2016/10/08/parking-lot/"/>
    <id>http://localhost:4000/2016/10/08/parking-lot/</id>
    <published>2016-10-08T07:43:59.000Z</published>
    <updated>2016-10-11T04:02:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Parking-Lot"><a href="#Parking-Lot" class="headerlink" title="Parking Lot"></a>Parking Lot</h2><h4 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h4><blockquote>
<p>Design a parking lot</p>
</blockquote>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>解题分析：我们尝试使用 <strong>抽象</strong> -&gt; <strong>设计对象</strong> -&gt; <strong>设计接口</strong> 的流程</p>
<h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><p>在这一步，我们重现现实中车库的工作原理。通常，车库可能有不同的层次，每层都有若干个车位，汽车可以停在车位上。车库的主要功能在于实现车辆入库和车辆出库，根据汽车在车库中停留的时间收费。</p>
<h4 id="设计对象"><a href="#设计对象" class="headerlink" title="设计对象"></a>设计对象</h4><p>经过抽象分析，我们发现了车位、层次、车库、汽车这些实体。对于每个实体，我们都应该构造一个类去描述它。我们考虑各个实体之间的从属，继承关系：很明显，车库拥有不同层次，每个层次拥有一些车位。因此，车库、层次、车位属于“Has-A”的关系。考虑我们可能希望车库是一个全局都可以访问的变量，而且程序中应该只有一个车库实例，所以我们可以利用单例模式，把车库作为一个单例。进一步考虑汽车实体，现实中，有各种类型的汽车，不同类型的车辆对车位的要求也不一样。然而，汽车具有一些共同属性，比如车长，车宽等等，特别地，对于本例，每辆车都需要记录停车的状态。所以，我们可以考虑从一个汽车基类派生出不同类型的汽车派生类。</p>
<h4 id="设计接口"><a href="#设计接口" class="headerlink" title="设计接口"></a>设计接口</h4><p>车库需要与用户进行交互，因此应该提供车辆入库和车辆出库的接口。车辆入库时，需要从最底层依次向上寻找可用的车位，因此，寻找车位应该一个是由层次提供的接口，返回一个车位。车库把这个车位提供给一个汽车实例，并且标记车位不可用。当车辆出库时，我们需要汽车提供它停车位置的信息(因此，车辆需要提供接口返回它停车的位置)，车库需要计算停车费，并且标记车位可用。</p>
<h4 id="进一步讨论"><a href="#进一步讨论" class="headerlink" title="进一步讨论"></a>进一步讨论</h4><p>我们提供的代码并不是线程安全的，当多个线程同时调用enter和leave的时候，可能造成停车状态的不一致，需要通过加锁解决。其次，查找车位的时候我们实现了最简单的线性查找。<strong>事实上，我们可以用一个队列记录可用的车位</strong>，每次只需要弹出一个即可。那对于不同的车位类型怎么处理？我们可以用多个队列记录可用的车位，每个队列对应一个车型。</p>
<p>OO经典题了<br>ParkingLot is a class.<br>ParkingSpace is a class.<br>ParkingSpace has an Entrance.<br>Entrance has a location or more specifically, distance from Entrance.<br>ParkingLotSign is a class.<br>ParkingLot has a ParkingLotSign.<br>ParkingLot has a finite number of ParkingSpaces.<br>HandicappedParkingSpace is a subclass of ParkingSpace.<br>RegularParkingSpace is a subclass of ParkingSpace.<br>CompactParkingSpace is a subclass of ParkingSpace.<br>ParkingLot keeps array of ParkingSpaces, and a separate array of vacant<br>Parking</p>
<h4 id="Vehicle"><a href="#Vehicle" class="headerlink" title="Vehicle"></a>Vehicle</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">	    <span class="keyword">int</span>     length;</div><div class="line">	    <span class="keyword">int</span>     width;</div><div class="line">	    bool    parked;</div><div class="line">	    Spot    *spot;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">	    <span class="comment">// omit some setters / getters</span></div><div class="line">	    <span class="comment">// virtual function here because subclasses will have different behavior</span></div><div class="line">	    <span class="function">virtual SpotType <span class="title">getRequiredSpotType</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">	    <span class="comment">// no need for virtual functions here because subclasses will have the same "behavior"</span></div><div class="line">	    <span class="function">bool <span class="title">isParked</span><span class="params">()</span></span>;</div><div class="line">	    <span class="function"><span class="keyword">void</span> <span class="title">parkVehicle</span><span class="params">(Spot *s)</span></span>;  <span class="comment">// park at spot S;</span></div><div class="line">	    Spot *removeVehicle();      <span class="comment">// move the vehicle away, return parked spot</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Level"><a href="#Level" class="headerlink" title="Level"></a>Level</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Level</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">	    vector&lt;Spot&gt; spots;</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">	    <span class="comment">// find an available spot for a vehicle</span></div><div class="line">	    <span class="comment">// return NULL if all spots are taken</span></div><div class="line">	    Spot *findASpot(Vehicle *v);    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Parking-Lot-1"><a href="#Parking-Lot-1" class="headerlink" title="Parking Lot"></a>Parking Lot</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParkingLot</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">	    vector&lt;Level&gt; levels;</div><div class="line">	    <span class="keyword">static</span> ParkingLot *pInstance;</div><div class="line">	    unordered_map&lt;Vehicle *, time_t&gt; parkingInfo;</div><div class="line">	</div><div class="line">	    ParkingLot();</div><div class="line">	    <span class="comment">// Stop the compiler generating methods of copy the object</span></div><div class="line">	    ParkingLot(<span class="keyword">const</span> ParkingLot &amp;copy);    <span class="comment">// Not Implemented</span></div><div class="line">	    ParkingLot&amp; operator = (<span class="keyword">const</span> ParkingLot &amp; copy);    <span class="comment">// Not Implemented</span></div><div class="line">	</div><div class="line">	    <span class="function">time_t <span class="title">getCurrentTime</span><span class="params">()</span></span>;</div><div class="line">	    <span class="function"><span class="keyword">double</span> <span class="title">calculateFee</span><span class="params">(Vehicle *v)</span></span>;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">	    <span class="keyword">static</span> ParkingLot *getInstance();</div><div class="line">	    <span class="comment">// <span class="doctag">NOTE:</span> vehicleEnter and leave is not thread safe!</span></div><div class="line">	    <span class="function">ErrorCode <span class="title">vehicleEnter</span><span class="params">(Vehicle *v)</span></span>;</div><div class="line">	    <span class="function">ErrorCode <span class="title">vehicleLeave</span><span class="params">(Vehicle *v, <span class="keyword">double</span> *fee)</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">// define some constants</div><div class="line">enum ErrorCode &#123;</div><div class="line">    NO_ERROR,</div><div class="line">    ERROR</div><div class="line">&#125;;</div><div class="line"></div><div class="line">enum SpotType &#123;</div><div class="line">    COMPACT,</div><div class="line">    SUV,</div><div class="line">    RESERVED</div><div class="line">&#125;;</div><div class="line">#define NO_PARKING (-1)</div><div class="line"></div><div class="line">class Spot &#123;</div><div class="line">public:</div><div class="line">    bool     available;</div><div class="line">    SpotType type;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Vehicle &#123;</div><div class="line">private:</div><div class="line">    int     length;</div><div class="line">    int     width;</div><div class="line">    bool    parked;</div><div class="line">    Spot    *spot;</div><div class="line">public:</div><div class="line">    // omit some setters / getters</div><div class="line">    // virtual function here because subclasses will have different behavior</div><div class="line">    virtual SpotType getRequiredSpotType() = 0;</div><div class="line">    // no need for virtual functions here because subclasses will have the same "behavior"</div><div class="line">    bool isParked();</div><div class="line">    void parkVehicle(Spot *s);  // park at spot S;</div><div class="line">    Spot *removeVehicle();      // move the vehicle away, return parked spot</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//every type of vehicle has default value of length and width;</div><div class="line">class Motor:public Vehicle&#123;&#125;;</div><div class="line">class Car:public Vehicle&#123;&#125;;</div><div class="line">class SUV:public Vehicle&#123;&#125;;</div><div class="line"></div><div class="line">class Level &#123;</div><div class="line">private:</div><div class="line">    vector&lt;Spot&gt; spots;</div><div class="line">public:</div><div class="line">    // find an available spot for a vehicle</div><div class="line">    // return NULL if all spots are taken</div><div class="line">    Spot *findASpot(Vehicle *v);    </div><div class="line">&#125;;</div><div class="line"></div><div class="line">class ParkingLot &#123;</div><div class="line">private:</div><div class="line">    vector&lt;Level&gt; levels;</div><div class="line">    static ParkingLot *pInstance;</div><div class="line">    unordered_map&lt;Vehicle *, time_t&gt; parkingInfo;</div><div class="line"></div><div class="line">    ParkingLot();</div><div class="line">    // Stop the compiler generating methods of copy the object</div><div class="line">    ParkingLot(const ParkingLot &amp;copy);    // Not Implemented</div><div class="line">    ParkingLot&amp; operator = (const ParkingLot &amp; copy);    // Not Implemented</div><div class="line"></div><div class="line">    time_t getCurrentTime();</div><div class="line">    double calculateFee(Vehicle *v);</div><div class="line"></div><div class="line">public:</div><div class="line">    static ParkingLot *getInstance();</div><div class="line">    // NOTE: vehicleEnter and leave is not thread safe!</div><div class="line">    ErrorCode vehicleEnter(Vehicle *v);</div><div class="line">    ErrorCode vehicleLeave(Vehicle *v, double *fee);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ErrorCode ParkingLot::vehicleEnter(Vehicle *v) &#123;</div><div class="line">    Spot *spot = NULL;</div><div class="line">    for (int i = 0; i &lt; levels.size();i++) &#123;</div><div class="line">        spot = levels[i].findASpot(v);</div><div class="line">        if (spot)</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    if (!spot) &#123;</div><div class="line">        return ERROR;</div><div class="line">    &#125;</div><div class="line">    v-&gt;parkVehicle(spot);</div><div class="line">    spot-&gt;available = false;</div><div class="line">    parkingInfo[v] = getCurrentTime();</div><div class="line">    return NO_ERROR;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ErrorCode ParkingLot::vehicleLeave(Vehicle *v, double *fee) &#123;</div><div class="line">    *fee = 0;</div><div class="line">    if (!v-&gt;isParked()) &#123;</div><div class="line">        return ERROR;</div><div class="line">    &#125;</div><div class="line">    Spot *spot = v-&gt;removeVehicle();</div><div class="line">    spot-&gt;available = true;</div><div class="line">    *fee = calculateFee(v);</div><div class="line">    parkingInfo.erase(v);</div><div class="line">    return NO_ERROR;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Parking-Lot&quot;&gt;&lt;a href=&quot;#Parking-Lot&quot; class=&quot;headerlink&quot; title=&quot;Parking Lot&quot;&gt;&lt;/a&gt;Parking Lot&lt;/h2&gt;&lt;h4 id=&quot;出处&quot;&gt;&lt;a href=&quot;#出处&quot; class=&quot;head
    
    </summary>
    
      <category term="interviews" scheme="http://localhost:4000/categories/interviews/"/>
    
      <category term="oodesign" scheme="http://localhost:4000/categories/interviews/oodesign/"/>
    
    
  </entry>
  
  <entry>
    <title>通往财富自由之路（第五周） - 遇到贵人的方法</title>
    <link href="http://localhost:4000/2016/10/07/2016-10-16/"/>
    <id>http://localhost:4000/2016/10/07/2016-10-16/</id>
    <published>2016-10-08T04:42:47.000Z</published>
    <updated>2016-10-18T06:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>读到笑来老师的这期文档，我产生了极大的共鸣。经常有人会抱怨自己没有机会，而有的人缺处处能得到贵人相助。有这个思想的人往往是把结果和过程弄反了。笑来老师的这期文章给出了非常逻辑性的答案。</p>
<h2 id="智商高，情商低？"><a href="#智商高，情商低？" class="headerlink" title="智商高，情商低？"></a>智商高，情商低？</h2><p>首先，我们要理解一个问题，考试高的人并不等于智商高。当然很多学霸确实在各种天份上都高人一筹，但也有很多人只是考试机器。对这类人来说他们只是『考』商高，非智商高。</p>
<p>其实智商和情商本质上是统一的，情商和智商本身都是和大脑相关的评价标准，一个智商高的人往往懂得如何投资未来积累资源。而这些也就形成了高情商。</p>
<h2 id="如何遇见贵人"><a href="#如何遇见贵人" class="headerlink" title="如何遇见贵人"></a>如何遇见贵人</h2><p>笑来老师的母亲从小就教育他，一个人只有自己首先得是个贵人才能遇到贵人。</p>
<p>你不优秀，就没有有效的社交。这是个非常朴素、简单，却永恒有效的道理。『遇到贵人』这件事从来不应该是我们的目的，相反『成为贵人』才是我们应该努力的方向。当你已经可以成为自己的贵人时，你就可以帮助别人，也会得到其他贵人的帮助。</p>
<ol>
<li>乐观的人更容易遇到贵人</li>
<li>贵人更容易遇到贵人</li>
<li>所谓贵人就是能帮助他人进步的人</li>
<li>优秀的人，值得尊重的人更容易获得帮助</li>
<li>乐于分享的人更容易获得帮助</li>
<li>不耻于求助的人更容易获得帮助</li>
<li>求助的时候不宜仅用金钱作为回报，反之亦然</li>
<li>贵人未必是牛人，牛人也未必能成为贵人。贵人更懂得『独贵贵不如众贵贵』</li>
<li>人们的成功，源自于大量的希望看到他成功的人。反过来，若是有大量的人不愿意看到某人成功，那么此人很难或者『贵人相助』</li>
<li>做正确的事情更容易获得贵人相助。</li>
<li>活在未来的人更容易遇到贵人，因为别人能在其身上看到希望。</li>
</ol>
<h2 id="如何保持积极心态"><a href="#如何保持积极心态" class="headerlink" title="如何保持积极心态"></a>如何保持积极心态</h2><p>始终保持积极的心态是一个人成长的催化剂。人生充满酸甜苦辣，悲欢离合。客观事物是不能改变的，但改变看待事物的角度有时候会带给我们截然不同的结果。</p>
<p>对于失败，我们可以认为那是『暂时的不成功』。而讨厌则是『还没喜欢上』罢了。转换了思考角度后，我们永远都是继续努力下去的理由。用罗胖的经典语录总结，想要成功无它，憋住一口真气不散。</p>
<p>当我们需要他人帮助时，我们就应该勇敢的说出来。寻求帮助不等于乞讨，添麻烦，占便宜。一个人寻求帮助实际上是整合资源，帮助你的人是在用自己的资源投资在你身上，因为他相信你的未来会更好。我们要相信贵人的眼光。现在还不上的人情，未来一定有机会能报答。</p>
<p>这种思想和是明朝政治家、哲学家王守仁阐述的『知行合一』不谋而合。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这期的内容都是干货，其实很多的核心思想我已经作为自己未来发展的纲领。首先，情商是智商在社交和自我投资方面的具体体现。其次，一个人想要尝尝获得贵人相助，最便捷的途径就是让自己成为一个贵人。最后，学会转换看待事物的角度这个小技巧，会让我们更容易做到知行合一。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;读到笑来老师的这期文档，我产生了极大的共鸣。经常有人会抱怨自己没有机会，而有的人缺处处能得到贵人相助。有这个思想的人往往是把结果和过程弄反了
    
    </summary>
    
      <category term="essay" scheme="http://localhost:4000/categories/essay/"/>
    
    
      <category term="得到订阅" scheme="http://localhost:4000/tags/%E5%BE%97%E5%88%B0%E8%AE%A2%E9%98%85/"/>
    
      <category term="通往财富自由之路" scheme="http://localhost:4000/tags/%E9%80%9A%E5%BE%80%E8%B4%A2%E5%AF%8C%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Traveling Light 博客正式开通</title>
    <link href="http://localhost:4000/2016/10/06/blog_opening/"/>
    <id>http://localhost:4000/2016/10/06/blog_opening/</id>
    <published>2016-10-07T04:42:47.000Z</published>
    <updated>2016-10-18T06:27:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直都想搭建一个属于自己博客，一直到这次换工作期间才真正实行。非常感谢一位素未平生的博主『小土刀』，他的博客给了我很大的动力，在此也强力推荐一下 <a href="http://wdxtub.com" target="_blank" rel="external">link</a>。在选择用什么技术来搭建博客的时候考虑了很多种的方案，归类总结起来有以下三种：</p>
<ol>
<li>使用第三方的博客网站 </li>
<li>自己搭建静态网站</li>
<li>自己搭建动态网站</li>
</ol>
<h3 id="1-使用第三方博客"><a href="#1-使用第三方博客" class="headerlink" title="1. 使用第三方博客"></a>1. 使用第三方博客</h3><p>在朋友的推荐下，尝试了<code>SegmentFault</code> <code>OSChina</code> <code>简书</code>，总体来说都大同小异。功能上大部分博客都支持markdown语法，代码高亮，文档目录索引等功能。不过因为是第三方平台，免不了有一些文章推荐，广告信息等等。总觉得不够清爽，于是下定决心放弃使用第三方博客。</p>
<h3 id="2-自己搭建静态博客"><a href="#2-自己搭建静态博客" class="headerlink" title="2. 自己搭建静态博客"></a>2. 自己搭建静态博客</h3><p>说到静态博客就不得不提到大名鼎鼎的Jelly，网上文档很多，搭建起来并没有什么难度。最后出来的默认效果更像是一个online resume，并不太符合我的需求。之后看到了Hexo这个比较新的framework。Hexo是由一位台湾程序员开发的，所以整体的设计很符合亚洲人的口味。简洁大方的同时，可定制化程度也很高。</p>
<p>于是，我继续Hexo和Github Pages搭建了一个博客，使用了很流行的NEXT主题。定制化主题其实主要就是修改Hexo默认的几个页面模板，里面使用了wisg语言，当然你也可以使用其他几种常见模板语言。</p>
<h3 id="3-自己搭建动态网站"><a href="#3-自己搭建动态网站" class="headerlink" title="3. 自己搭建动态网站"></a>3. 自己搭建动态网站</h3><p>搭建完静态网站后，我产生一个疑问，到底静态博客和动态的在使用上有什么区别。为了解开这个疑惑，我就想寻找一个可以很快上手的动态博客框架，然后发现了基于Python Django的Project Zinnia。这几年我一直开发都是用的Python，所以上手起来比较快。很快搭建好以后我把它和之前搭建的静态博客进行了对比。</p>
<p><strong>区别如下：</strong></p>
<ol>
<li>静态博客无数据库，所有数据用md文本格式保存，本身有可读性。动态博客有数据库，数据可以用你选择的形式存入DB，所有的操作基于基于数据库进行。</li>
<li>静态博客只需要一个托管平台就可使用，不需要架设，配置简单。动态博客需要基于一台服务器。</li>
<li>静态博客非常的light，即插即用。动态博客其实后台用service形式实现就是包含前后端的网站。</li>
<li>编辑内容时，静态博客可以使用任何你喜欢的editor，比如sublime，我选择的是一款Mac下的付费软件叫MWeb。而动态博客由内容输入页面的文本框类型决定，可以选择富文本，markdown或者任何其他格式。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直都想搭建一个属于自己博客，一直到这次换工作期间才真正实行。非常感谢一位素未平生的博主『小土刀』，他的博客给了我很大的动力，在此也强力推荐
    
    </summary>
    
      <category term="essay" scheme="http://localhost:4000/categories/essay/"/>
    
    
      <category term="blog" scheme="http://localhost:4000/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hexo基本命令</title>
    <link href="http://localhost:4000/2016/09/24/hello-world/"/>
    <id>http://localhost:4000/2016/09/24/hello-world/</id>
    <published>2016-09-24T23:17:59.000Z</published>
    <updated>2016-10-15T00:12:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
